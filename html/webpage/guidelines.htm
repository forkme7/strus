<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
	<link rel="icon" type="image/ico" href="images/strus.ico" />
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="description" content="Programming guidelines of strus, a collection of C++ libraries for building a full-text search engine." />
	<meta name="keywords" content="fulltext search engine C++" />
	<meta name="author" content="Patrick Frey &lt;patrickpfrey (a) yahoo (dt) com&gt;" />
	<link rel="stylesheet" type="text/css" href="text-profile.css" title="Text Profile" media="all" />
	<title>Strus programming guidelines</title>
</head>

<body>
<script type="text/javascript">
</script><div id="wrap">
	<div id="content">
		<h1>Strus programming guidelines</h1>

		<h2>Paradigms</h2>
		<h4>Polymorphism</h4>
		<p class="description">Inheritance is only used for implementing pure interfaces.
		The names of the abstract classes all end with "Interface". Objects in <i>strus</i>
		are all either pure data types with no polymorhism or implementations of 
		pure interfaces referenced by pointers. This restriction makes all elements of the
		interface either serializable or proxyable. Following these rules makes
		remoting possible without too much effort.</p>

		<h4>Public/private/protected</h4>
		<p class="description">Avoid protected members and don't use public or friends 
		to open backdoors whenever possible.</p>

		<h4>Components built as libraries</h4>
		<p class="description">All components even extensions should be implemented as
		libraries. If they are built a modules the module whould wrap to the library.</p>

		<h4>Use of templates</h4>
		<p class="description">No templates in public interfaces.</p>

		<h2>Naming conventions</h2>

		<h4>Type naming</h4>
		<p class="description">In interfaces strict camel case is used. Type,struct and
		class names and enum members, except data types implementing an STL concept like iterator, start 
		with a capital letter. Method names start with a lower case letter. Enum names may or
		may not contain only capital letters.</p>

		<h4>File names</h4>
		<p class="description">File names start with a lower case letter and have otherwise 
		exactly the same name as the main class they implement. Main source files of a
		library have the same name trunk as the library. This name trunk has always 
		the prefix '<b>libstrus_</b>'. Main header files of libraries are in a 'lib' sub 
		directory of the main include and have the same name as the library
		without the prefix '<b>libstrus_</b>'. </p>

		<h4>Macro names</h4>
		<p class="description">Macros have only capital letters with underscores '<b>_</b>'
		separating semantical parts of the macro identifier. But macros should
		be avoided if possible.</p>

		<h4>Module global variable names</h4>
		<p class="description">Static global variable names in a modules (never exported)
		have the prefix '<b>g_</b>'.</p>

		<h4>Parameter names</h4>
		<p class="description">Class method parameter names of classes have the suffix '<b>_</b>',
		if their name clashes with a member name. Such name clashes should only happen
		if the parameter initializes a member name.</p>

		<h4>Local variable names</h4>
		<p class="description">Avoid variable names conaining only one letter like 'i', 'x'.
		They are hard to find without an editor supporting the programming language.
		(I personally do not like programming environments that go beyond a text editor with some
		highlighting. I am convinced that the quality of code raises without semantically
		supported navigation help, because it educates you to work towards a clear consistent naming
		scheme.)</p>

		<h4>Visibility</h4>
		<p class="description">Use explicit visibility to declare exported symbols of
		shared libraries. Shared libraries export only functions constructing objects implementing 
		an interface, having only interface references or
		<a href="http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html">POD data types</a>
		or C++ basic and STL data types as arguments.</p>
	
		<h4>Friend declarations</h4>
		<p class="description">Do not use friend declarations if possible.
		In most cases they are just backdoors that camouflage bad design.</p>

		<h4>Member variables</h4>
		<p class="description">Member variable names have the prefix '<b>m_</b>' if they are part
		of the interface. For pure <a href="http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html">POD structure types</a>,
		that are only used internally this prefix may be omitted.

		<h2>Build system</h2>
		<h4>Build tool</h4>
		<p class="description">The build system is currently <a href="http://www.cmake.org/">CMake</a>.
		But packaging with <a href="https://en.wikipedia.org/wiki/CPack">CPack</a>
		is forbidden. Packaging is done by hand.
		</p>

		<h4>Mixing compilers</h4>
		<p class="description"><i>strus</i> is not composed of
		real libraries. Compilers cannot be mixed due to an interface design using exceptions
		as part of the interface and non basic (STL) data types passing the interface.
		</p>

		<h2>Code appearance</h2>
		<h4>Indentiation</h4>
		<p class="description">Indentiation with TABs only. Pascal style opening of block
		brackets '<b>{</b>' '<b>}</b>'. This means that you start a new line for the '<b>{</b>'
		opening a new block. The then clause of if statements with one assignment may be 
		written without opening an close brackets, e.g. "if (size > 0) sizeType = NON_ZERO;" </p>

		<h4>Source code documentation</h4>
		<p class="description">Avoid pseudo documentation. Documentation should be minimal
		in the source. Use numbering for execution steps and alphabetic labeling for
		alternative choices.</p>
		<h4>Doxygen documentation</h4>
		<p class="description">Interface documentation should be in
		<a href="www.doxygen.org">doxygen</a> style (backslash variant).</p>

		<h4>Errors/Warnings</h4>
		<p class="description">No warnings in the code. Use most restrictive settings
		available on your platform and declare warnings as errors. There might be exceptional
		cases, but they have to be discussed.</p>
	</div>
</div>
</body>
</html>


