<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
	<link rel="icon" type="image/ico" href="images/strus.ico" />
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="description" content="Description of the command line utility programs of strus, a collection of C++ libraries for building a full-text search engine." />
	<meta name="keywords" content="fulltext search engine C++" />
	<meta name="author" content="Patrick Frey &lt;patrickpfrey (a) yahoo (dt) com&gt;" />
	<link rel="stylesheet" type="text/css" href="text-profile.css" title="Text Profile" media="all" />
	<title>Strus utility programs</title>
</head>
<body>
<div id="wrap">
	<div id="content">
		<h1>Command line utility programs</h1>
		<p class="description">This document lists some utility programs with description,
		most of them are implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>.
		Some of these programs use domain specific language for their input description. You find
		the list of languages <a href="utilities_lang.htm">here</a>.
		</p>
		<h2>List of utility programs</h2>
<ul>
<a name="strusCreate"></a><li><b>strusCreate</b>
<br/>Create a strus storage. (implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusCreate_usage" type="checkbox" >
<label for="strusCreate_usage">Usage</label>
<pre>
usage: strusCreate [options]
description: Creates a storage with its key value store database.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;;compression=&lt;yes/no&gt;
            acl=&lt;yes/no, yes if users with different access rights exist&gt;
            metadata=&lt;comma separated list of meta data def&gt;
-S|--configfile &lt;FILENAME&gt;
    Define the storage configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusDestroy"></a><li><b>strusDestroy</b>
<br/>Remove a strus storage and all its files. (implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusDestroy_usage" type="checkbox" >
<label for="strusDestroy_usage">Usage</label>
<pre>
usage: strusDestroy [options]
description: Removes an existing storage database.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
-S|--configfile &lt;FILENAME&gt;
    Define the storage configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusInspect"></a><li><b>strusInspect</b>
<br/>Inspect elements of items inserted in a strus storage. (implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusInspect_usage" type="checkbox" >
<label for="strusInspect_usage">Usage</label>
<pre>
usage: strusInspect [options] &lt;what...&gt;
&lt;what&gt;    : what to inspect:
            "pos" &lt;type&gt; &lt;value&gt; [&lt;doc-id/no&gt;]
               = Get the list of positions for a search index term.
                 If document is not specified then dump value for all docs.
            "ff" &lt;type&gt; &lt;value&gt; [&lt;doc-id/no&gt;]
               = Get the feature frequency for a search index feature
                 If document is not specified then dump value for all docs.
            "df" &lt;type&gt; &lt;value&gt;
               = Get the document frequency for a search index feature
            "ttf" &lt;type&gt; [&lt;doc-id/no&gt;]
               = Get the term type frequency in a document
                 If document is not specified then dump value for all docs.
            "ttc" &lt;type&gt; [&lt;doc-id/no&gt;]
               = Get the term type count (distinct) in a document
                 If document is not specified then dump value for all docs.
            "featuretypes"
               = Get list of feature types in the index
            "indexterms" &lt;type&gt; [&lt;doc-id/no&gt;]
               = Get the list of tuples of term value, first position and ff 
                 for a search index term type.
                 If document is not specified then dump value for all docs.
            "nofdocs"
               = Get the number of documents in the storage
            "maxdocno"
               = Get the maximum document number allocated in the storage
            "metadata" &lt;name&gt; [&lt;doc-id/no&gt;]
               = Get the value of a meta data element
                 If document is not specified then dump value for all docs.
            "metatable"
               = Get the schema of the meta data table
            "attribute" &lt;name&gt; [&lt;doc-id/no&gt;]
               = Get the value of a document attribute
                 If document is not specified then dump value for all docs.
            "attrnames"
               = Get the list of all attribute names defined for the storage
            "content" &lt;type&gt; [&lt;doc-id/no&gt;]
               = Get the content of the forward index for a type
                 If document is not specified then dump content for all docs.
            "fwstats" &lt;type&gt; [&lt;doc-id/no&gt;]
               = Get the statistis of the forward index for a type
                 If document is not specified then dump value for all docs.
            "fwmap" &lt;type&gt; [&lt;doc-id/no&gt;]
               = Print a map docno to forward index element for a type
                 If document is not specified then dump value for all docs.
            "token" &lt;type&gt; &lt;doc-id/no&gt;
               = Get the list of terms in the forward index for a type
            "docno" &lt;docid&gt;
               = Get the internal document number for a document id
            "config"
               = Get the configuration the storage was created with
description: Inspect some data in the storage.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
-A|--attribute &lt;NAME&gt;
    Print attribute with name &lt;NAME&gt; for lists of results instead of docno
</pre>
</li>

<a name="strusAnalyze"></a><li><b>strusAnalyze</b>
<br/>Dump the document analyze result without feeding the storage. This program can be used to check the result of the document analysis.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusAnalyze_usage" type="checkbox" >
<label for="strusAnalyze_usage">Usage</label>
<pre>
usage: strusAnalyze [options] &lt;program&gt; &lt;document&gt;
&lt;program&gt;   = path of analyzer program
&lt;document&gt;  = path of document to analyze ('-' for stdin)
description: Analyzes a document and dumps the result to stdout.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-g|--segmenter &lt;NAME&gt;
    Use the document segmenter with name &lt;NAME&gt;
-C|--contenttype &lt;CT&gt;
    forced definition of the document class of the document analyzed.
-D|--dump &lt;DUMPCFG&gt;
    Dump ouput according &lt;DUMPCFG&gt;.
    &lt;DUMPCFG&gt; is a comma separated list of types or type value assignments.
    A type in &lt;DUMPCFG&gt; specifies the type to dump.
    A value an optional replacement of the term value.
    This kind of output is suitable for content analysis.
</pre>
</li>

<a name="strusAnalyzePhrase"></a><li><b>strusAnalyzePhrase</b>
<br/>Call the query analyzer with a phrase to analyze. This program can also be used to check details of the document analyzer as it tokenizes and normalizes a text segment with the tokenizer and normalizer specified.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusAnalyzePhrase_usage" type="checkbox" >
<label for="strusAnalyzePhrase_usage">Usage</label>
<pre>
usage: strusAnalyze [options] &lt;phrase&gt;
&lt;phrase&gt; =   path to phrase to analyze
             file or '-' for stdin if option -F is specified)
description: tokenizes and normalizes a text segment
             and prints the result to stdout.
options:
-h|--help
   Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-t|--tokenizer &lt;CALL&gt;
    Use the tokenizer &lt;CALL&gt; (default 'content')
-n|--normalizer &lt;CALL&gt;
    Use the normalizer &lt;CALL&gt; (default 'orig')
-q|--quot &lt;STR&gt;
    Use the string &lt;STR&gt; as quote for the result (default "'")
-P|--plain
    Do not print position and define default quotes as empty
-F|--fileinput
    Interpret phrase argument as a file name containing the input
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusAnalyzeQuery"></a><li><b>strusAnalyzeQuery</b>
<br/>Call the query analyzer with a query to analyze.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusAnalyzeQuery_usage" type="checkbox" >
<label for="strusAnalyzeQuery_usage">Usage</label>
<pre>
usage: strusAnalyzeQuery [options] &lt;program&gt; &lt;query&gt;
&lt;program&gt;  = path of analyzer program
&lt;query&gt;    = query content to analyze
             file or '-' for stdin if option -F is specified)
description: Analyzes a query and dumps the result to stdout.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-F|--fileinput
    Interpret query argument as a file name containing the input
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusSegment"></a><li><b>strusSegment</b>
<br/>Call the segmenter with a document and one or more expressions to exract with the segmenter. Dump the resulting segments to stdout.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusSegment_usage" type="checkbox" >
<label for="strusSegment_usage">Usage</label>
<pre>
usage: strusSegment [options] &lt;document&gt;
&lt;document&gt;  = path to document to segment ('-' for stdin)
description: Segments a document with the expressions (-e) specified
             and dumps the resulting segments to stdout.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-g|--segmenter &lt;NAME&gt;
    Use the document segmenter with name &lt;NAME&gt; (default textwolf XML)
-C|--contenttype &lt;CT&gt;
    forced definition of the document class of the document processed.
-e|--expression &lt;EXPR&gt;
    Use the expression &lt;EXPR&gt; to select documents (default '//()')
-i|--index
    Print the indices of the expressions matching as prefix with ':'
-p|--position
    Print the positions of the expressions matching as prefix
-q|--quot &lt;STR&gt;
    Use the string &lt;STR&gt; as quote for the result (default "'")
-P|--prefix &lt;STR&gt;
    Use the string &lt;STR&gt; as prefix for the result
-E|--esceol
    Escape end of line with space
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>


<a name="strusPatternMatcher"></a><li><b>strusPatternMatcher</b>
<br/>Processes some documents mit a pattern matcher and output all matches found.<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>).
<input class="toggle-box" id="strusPatternMatcher_usage" type="checkbox" >
<label for="strusPatternMatcher_usage">Usage</label>
<pre>
usage: strusPatternMatch [options] &lt;inputpath&gt;
&lt;inputpath&gt;  : input file or directory to process
description: Runs pattern matching on the input documents and dumps the result to stdout.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
    The module modstrus_analyzer_pattern is implicitely defined
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-K|--tokens
    Print the tokenization used for pattern matching too
-t|--threads &lt;N&gt;
    Set &lt;N&gt; as number of inserter threads to use
-x|--ext &lt;FILEEXT&gt;
    Do only process files with extension &lt;FILEEXT&gt;
-C|--contenttype &lt;CT&gt;
    forced definition of the document class of all documents processed.
-e|--expression &lt;EXP&gt;
    Define a selection expression &lt;EXP&gt; for the content to process
      (default if nothing specified is "//()"
-H|--markup &lt;NAME&gt;
    Output the content with markups of the rules or variables with name &lt;NAME&gt;
-Z|--marker &lt;MRK&gt;
    Define a character sequence inserted before every result declaration
-X|--lexer &lt;LX&gt;
    Use pattern lexer named &lt;LX&gt;
    Default is 'std'
-Y|--matcher &lt;PT&gt;
    Use pattern lexer named &lt;PT&gt;
    Default is 'std'
-p|--program &lt;PRG&gt;
    Load program &lt;PRG&gt; with patterns to process
-o|--output &lt;FILE&gt;
    Write output to file &lt;FILE&gt; (thread id is inserted before '.' with threads)
-g|--segmenter &lt;NAME&gt;
    Use the document segmenter with name &lt;NAME&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusPatternSerialize"></a><li><b>strusPatternSerialize</b>
<br/>Loads a pattern match program and outputs it in a serialized form that can be loaded by the analyzer.<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>).
<input class="toggle-box" id="strusPatternSerialize_usage" type="checkbox" >
<label for="strusPatternSerialize_usage">Usage</label>
<pre>
usage: strusPatternSerialize [options] &lt;program&gt;
description: Loads a pattern matcher program source in file &lt;program&gt;
    and outputs its serialization.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
    The module modstrus_analyzer_pattern is implicitely defined
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-F|--feeder
    Assume program with feeder (post analyzer processing)
-o|--output &lt;FILE&gt;
    Write output to file &lt;FILE&gt;.
    Do text output to stdout if not specified.
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusInsert"></a><li><b>strusInsert</b>
<br/>Insert a document or all files in a directory or in any descendant directory of it.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusInsert_usage" type="checkbox" >
<label for="strusInsert_usage">Usage</label>
<pre>
usage: strusInsert [options] &lt;program&gt; &lt;docpath&gt;
&lt;program&gt; = path of analyzer program or analyzer map program
&lt;docpath&gt; = path of document or directory to insert
description: Insert a document or a set of documents into a storage.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-S|--configfile &lt;FILENAME&gt;
    Define the storage configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-g|--segmenter &lt;NAME&gt;
    Use the document segmenter with name &lt;NAME&gt;
-C|--contenttype &lt;CT&gt;
    forced definition of the document class of all documents inserted.
-x|--extension &lt;EXT&gt;
    Grab only the files with extension &lt;EXT&gt; (default all files)
-t|--threads &lt;N&gt;
    Set &lt;N&gt; as number of inserter threads to use
-c|--commit &lt;N&gt;
    Set &lt;N&gt; as number of documents inserted per transaction (default 1000)
-f|--fetch &lt;N&gt;
    Set &lt;N&gt; as number of files fetched in each inserter iteration
    Default is the value of option '--commit' (one document/file)
-L|--logerror &lt;FILE&gt;
    Write the last error occurred to &lt;FILE&gt; in case of an exception
-V|--verbose
    verbose output
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusDeleteDocument"></a><li><b>strusDeleteDocument</b>
<br/>Deletes a list of documents referenced by document identifiers.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusDeleteDocument_usage" type="checkbox" >
<label for="strusDeleteDocument_usage">Usage</label>
<pre>
usage: strusDeleteDocument [options] &lt;docid&gt;
&lt;docid&gt;  = docid of the document to delete
description: Deletes a document in the storage.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusUpdateStorage"></a><li><b>strusUpdateStorage</b>
<br/>This program allows to update attributes, meta data and user access rights in a storage from a batch file.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusUpdateStorage_usage" type="checkbox" >
<label for="strusUpdateStorage_usage">Usage</label>
<pre>
usage: strusUpdateStorage [options] &lt;updatefile&gt;
&lt;updatefile&gt;  = file with the batch of updates ('-' for stdin)
description: Executes a batch of updates of attributes, meta data
             or user rights in a storage.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-a|--attribute &lt;NAME&gt;
    The update batch is a list of attributes assignments
    The name of the updated attribute is &lt;NAME&gt;.
-m|--metadata &lt;NAME&gt;
    The update batch is a list of meta data assignments.
    The name of the updated meta data element is &lt;NAME&gt;.
-u|--useraccess
    The update batch is a list of user right assignments.
-x|--mapattribute &lt;ATTR&gt;
    The update document is selected by the attribute &lt;ATTR&gt; as key,
    instead of the document id or document number.
-c|--commit &lt;N&gt;
    Set &lt;N&gt; as number of updates per transaction (default 10000)
    If &lt;N&gt; is set to 0 then only one commit is done at the end
-L|--logerror &lt;FILE&gt;
    Write the last error occurred to &lt;FILE&gt; in case of an exception
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusCheckStorage"></a><li><b>strusCheckStorage</b>
<br/>This program checks a strus storage for corrupt data.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusCheckStorage_usage" type="checkbox" >
<label for="strusCheckStorage_usage">Usage</label>
<pre>
usage: strusCheckStorage [options]
description: Checks a storage for corrupt data.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-e|--exists
    Checks if the database of the storage exists and return 'yes'/'no'
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the commands on the RPC server specified by &lt;ADDR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusCheckInsert"></a><li><b>strusCheckInsert</b>
<br/>Processes the documents the same way as strusInsert. But instead of inserting the documents,
it checks if the document representation in the storage is complete compared with the checked documents.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusCheckInsert_usage" type="checkbox" >
<label for="strusCheckInsert_usage">Usage</label>
<pre>
usage: strusCheckInsert [options] &lt;program&gt; &lt;docpath&gt;
&lt;program&gt; = path of analyzer program or analyzer map program
&lt;docpath&gt; = path of document or directory to check
description: Checks if a storage contains all data of a document set.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-S|--configfile &lt;FILENAME&gt;
    Define the storage configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-g|--segmenter &lt;NAME&gt;
    Use the document segmenter with name &lt;NAME&gt;
-C|--contenttype &lt;CT&gt;
    forced definition of the document class of all documents checked.
-x|--extension &lt;EXT&gt;
    Grab only the files with extension &lt;EXT&gt; (default all files)
-t|--threads &lt;N&gt;
    Set &lt;N&gt; as number of inserter threads to use
-l|--logfile &lt;FILE&gt;
    Set &lt;FILE&gt; as output file (default stdout)
-n|--notify &lt;N&gt;
    Set &lt;N&gt; as notification interval (number of documents)
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusQuery"></a><li><b>strusQuery</b>
<br/>Evaluate a query per command line.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusQuery_usage" type="checkbox" >
<label for="strusQuery_usage">Usage</label>
<pre>
usage: strusQuery [options] &lt;anprg&gt; &lt;qeprg&gt; &lt;query&gt;
&lt;anprg&gt;   = path of query analyzer program
&lt;qeprg&gt;   = path of query eval program
&lt;query&gt;    = query string
             file or '-' for stdin if option -F is specified)
description: Executes a query or a list of queries from a file.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-S|--configfile &lt;FILENAME&gt;
    Define the storage configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-u|--user &lt;NAME&gt;
    Use user name &lt;NAME&gt; for the query
-N|--nofranks &lt;N&gt;
    Return maximum &lt;N&gt; ranks as query result
-I|--firstrank &lt;N&gt;
    Return the result starting with rank &lt;N&gt; as first rank
-Q|--quiet
    No output of results
-D|--time
    Do print duration of pure query evaluation
-G|--debug
    Switch debug info of weighting and summarization on
-F|--fileinput
    Interpret query argument as a file name containing the input
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
-V|--verbose
    Verbose mode: Print some info like query analysis
</pre>
</li>

<a name="strusAlterMetaData"></a><li><b>strusAlterMetaData</b>
<br/>Alter the table structure for document metadata of a storage.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusAlterMetaData_usage" type="checkbox" >
<label for="strusAlterMetaData_usage">Usage</label>
<pre>
usage: strusAlterMetaData [options] &lt;config&gt; &lt;cmds&gt;
&lt;config&gt;  : configuration string of the storage
            semicolon';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
&lt;cmds&gt;    : semicolon separated list of commands:
            alter &lt;name&gt; &lt;newname&gt; &lt;newtype&gt;
              &lt;name&gt;    :name of the element to change
              &lt;newname&gt; :new name of the element
              &lt;newtype&gt; :new type (*) of the element
            add &lt;name&gt; &lt;type&gt;
              &lt;name&gt;    :name of the element to add
              &lt;type&gt;    :type (*) of the element to add
            delete &lt;name&gt;
              &lt;name&gt;    :name of the element to remove
            rename &lt;name&gt; &lt;newname&gt;
              &lt;name&gt;    :name of the element to rename
              &lt;newname&gt; :new name of the element
            clear &lt;name&gt;
              &lt;name&gt;    :name of the element to clear all values
(*)       :type of an element is one of the following:
              INT8      :one byte signed integer value
              UINT8     :one byte unsigned integer value
              INT16     :two bytes signed integer value
              UINT16    :two bytes unsigned integer value
              INT32     :four bytes signed integer value
              UINT32    :four bytes unsigned integer value
              FLOAT16   :two bytes floating point value (IEEE 754 small)
              FLOAT32   :four bytes floating point value (IEEE 754 single)
description: Executes a list of alter the meta data table commands.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusGenerateKeyMap"></a><li><b>strusGenerateKeyMap</b>
<br/>Dumps a list of terms as result of document anaylsis of a file or directory.
The dump can be loaded by the storage on startup to create a map of frequently used terms.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusGenerateKeyMap_usage" type="checkbox" >
<label for="strusGenerateKeyMap_usage">Usage</label>
<pre>
usage: strusGenerateKeyMap [options] &lt;program&gt; &lt;docpath&gt;
&lt;program&gt; = path of analyzer program  or analyzer map program
&lt;docpath&gt; = path of document or directory to insert
description: Dumps a list of terms as result of document
    anaylsis of a file or directory. The dump can be loaded by
    the storage on startup to create a map of frequently used terms.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-s|--segmenter &lt;NAME&gt;
    Use the document segmenter with name &lt;NAME&gt;
-C|--contenttype &lt;CT&gt;
    forced definition of the document class of all documents processed.
-x|--extension &lt;EXT&gt;
    Grab only the files with extension &lt;EXT&gt; (default all files)
-t|--threads &lt;N&gt;
    Set &lt;N&gt; as number of threads to use
-u|--unit &lt;N&gt;
    Set &lt;N&gt; as number of files processed per iteration (default 1000)
-n|--results &lt;N&gt;
    Set &lt;N&gt; as number of elements in the key map generated
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusDumpStatistics"></a><li><b>strusDumpStatistics</b>
<br/>Dumps the statisics that would be populated to in case of a distributed index to stout.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusDumpStatistics_usage" type="checkbox" >
<label for="strusDumpStatistics_usage">Usage</label>
<pre>
usage: strusDumpStatistics [options] &lt;filename&gt;
description: Dumps the statisics that would be populated 
in case of a distributed index to a file.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusDumpStorage"></a><li><b>strusDumpStorage</b>
<br/>Dumps the statisics that would be populated to in case of a distributed index to stout.
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>)
<input class="toggle-box" id="strusDumpStorage_usage" type="checkbox" >
<label for="strusDumpStorage_usage">Usage</label>
<pre>
usage: strusDumpStorage [options]
description: Dumps a strus storage to stout
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-s|--storage &lt;CONFIG&gt;
    Define the storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-B|--blocksizes
    Dump only block sizes
-P|--prefix &lt;KEY&gt;
    Dump only the blocks of a certain type with prefix &lt;KEY&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusResizeBlocks"></a><li><b>strusResizeBlocks</b>
<br/>Resize the blocks for a storage based on leveldb (leveldb only!).
(implemented in the project <a href="https://github.com/patrickfrey/strus">strus</a>)
<input class="toggle-box" id="strusResizeBlocks_usage" type="checkbox" >
<label for="strusResizeBlocks_usage">Usage</label>
<pre>
strusResizeBlocks [options] &lt;config&gt; &lt;blocktype&gt; &lt;newsize&gt;
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
-c|--commit &lt;N&gt;
    Set &lt;N&gt; as number of documents inserted per transaction (default 1000)
-D|--docno &lt;START&gt;:&lt;END&gt;
    Process document number range &lt;START&gt; to &lt;END&gt;
-T|--termtype &lt;TYPE&gt;
    Set &lt;TYPE&gt; as term type to select for resize
&lt;config&gt;     : configuration string of the key/value store database
&lt;blocktype&gt;  : storage block type. One of the following:
               forwardindex:forward index block type
&lt;newsize&gt;    : new size of the blocks, unit depends on block type.
</pre>
</li>

<a name="strusCreateVectorStorage"></a><li><b>strusCreateVectorStorage</b>
<br/>Creates a storage for vectors.<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>).
<input class="toggle-box" id="strusCreateVectorStorage_usage" type="checkbox" >
<label for="strusCreateVectorStorage_usage">Usage</label>
<pre>
usage: strusCreateVectorStorage [options]
description: Creates a vector storage with all vectors inserted.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;.
    The module modstrus_storage_vector is implicitely defined
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-s|--config &lt;CONFIG&gt;
    Define the vector storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
    Select the vector storage type with the parameter 'storage'.
-S|--configfile &lt;FILENAME&gt;
    Define the vector storage configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-P|--portable
    Tell the loader that the vector values are stored in a portable way (hton)
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
-f|--file &lt;INFILE&gt;
    Declare an input file with the vectors to process a &lt;INFILE&gt;
    Known formats are word2vec binary or text format.
    All files are added, if there are many input files specified.
    No input files lead to an empty storage.
</pre>
</li>

<a name="strusBuildVectorStorage"></a><li><b>strusBuildVectorStorage</b>
<br/>Build relations describing some structures of the vectors inserted into a storge.<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>).
<input class="toggle-box" id="strusBuildVectorStorage_usage" type="checkbox" >
<label for="strusBuildVectorStorage_usage">Usage</label>
<pre>
usage: strusBuildVectorStorage [options] { &lt;commands&gt; }
description: Executes a list of vector builder command.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;.
    The module modstrus_storage_vector is implicitely defined
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-s|--config &lt;CONFIG&gt;
    Define the vector space model configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
    Select the vector storage type with the parameter 'storage'.
-S|--configfile &lt;FILENAME&gt;
    Define the vector space model configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
-t|--threads &lt;N&gt;
    Specify the maximum number of threads to use as &lt;N&gt; (default 16)
</pre>
</li>

<a name="strusInspectVectorStorage"></a><li><b>strusInspectVectorStorage</b>
<br/>Program to introspect a vector storage. Query for near vectors, for relations beween vectors, etc.<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>).
<input class="toggle-box" id="strusInspectVectorStorage_usage" type="checkbox" >
<label for="strusInspectVectorStorage_usage">Usage</label>
<pre>
usage: strusInspectVectorStorage [options] &lt;what...&gt;
&lt;what&gt;    : what to inspect:
            "classnames"
               = Return all names of concept classes of the model.
            "featcon" &lt;classname&gt; { &lt;feat&gt; }
               = Take a single or list of feature numbers (with '%' prefix) or names as input.
                 Return a sorted list of indices of concepts of the class &lt;classname&gt; assigned to it.
            "featvec" &lt;feat&gt;
               = Take a single feature number (with '%' prefix) or name as input.
                 Return the vector assigned to it.
            "featname" { &lt;feat&gt; }
               = Take a single or list of feature numbers as input.
                 Return the list of names assigned to it.
            "featidx" { &lt;featname&gt; }
               = Take a single or list of feature names as input.
                 Return the list of indices assigned to it.
            "featsim" &lt;feat1&gt; &lt;feat2&gt;
               = Take two feature numbers (with '%' prefix) or names as input.
                 Return the cosine similarity, a value between 0.0 and 1.0.
            "confeat" or "confeatidx" "confeatname" &lt;classname&gt; { &lt;conceptno&gt; }
               = Take a single or list of concept numbers of the class &lt;classname&gt; as input.
                 Return a sorted list of features assigned to it.
                 "confeatidx" prints only the result feature indices.
                 "confeatname" prints only the result feature names.
                 "confeat" prints both indices and names.
            "nbfeat" or "nbfeatidx" "nbfeatname" &lt;classname&gt; { &lt;feat&gt; }
               = Take a single or list of feature numbers (with '%' prefix) or names as input.
                 Return a list of features reachable over any shared concept of the class &lt;classname&gt;.
                 "nbfeat" prints both indices and names.
                 "nbfeatname" prints only the result feature names.
                 "nbfeat" prints both indices and names.
            "opfeat"  or "opfeatname" { &lt;expr&gt; }
               = Take an arithmetic expression of feature numbers (with '%' prefix) or names as input.
                 Return a list of features found.
            "opfeatw"  or "opfeatwname" { &lt;expr&gt; }
               = same as "opfeat", resp. "opfeatname" but print also the result weights.
            "nofcon"
               = Get the number of concepts of the class &lt;classname&gt; defined.
            "noffeat"
               = Get the number of features defined.
            "config"
               = Get the configuration the vector storage.
                 Select the vector storage type with the parameter 'storage'.
            "dump" [ &lt;dbprefix&gt; ]
               = Dump the contents of the VSM repository.
                 The optional parameter &lt;dbprefix&gt; selects a specific block type.
description: Inspects some data defined in a vector space model build.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;.
    The module modstrus_storage_vector is implicitely defined
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-s|--config &lt;CONFIG&gt;
    Define the vector space model configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
-S|--configfile &lt;FILENAME&gt;
    Define the vector space model configuration file as &lt;FILENAME&gt;
    &lt;FILENAME&gt; is a file containing the configuration string
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
-D|--time
    Do measure duration of operation (only for search)
-t|--threads &lt;N&gt;
    Set &lt;N&gt; as number of threads to use (only for search)
    Default is no multithreading (N=0)
-x|--realmeasure
    Calculate real values of similarities for search and compare
    of methods 'opfeat','opfeatname','opfeatw' and 'opfeatwname'.
-N|--nofranks &lt;N&gt;
    Limit the number of results to for searches to &lt;N&gt; (default 20)
</pre>
</li>

<a name="strusRpcServer"></a><li><b>strusRpcServer</b>
<br/>Start a server processing requests from strus RPC clients<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusRpc">strusRpc</a>).
<input class="toggle-box" id="strusRpcServer_usage" type="checkbox" >
<label for="strusRpcServer_usage">Usage</label>
<pre>
strusRpcServer [options]
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Define a resource path &lt;DIR&gt; for the analyzer
-p|--port &lt;PORT&gt;
    Define the port to listen for requests as &lt;PORT&gt; (default 7181)
-s|--storage &lt;CONFIG&gt;
    Define configuration &lt;CONFIG&gt; of storage hosted by this server
-S|--configfile &lt;CFGFILE&gt;
    Define storage configuration as content of file &lt;CFGFILE&gt;
-x|--vecstorage &lt;CONFIG&gt;
    Define configuration &lt;CONFIG&gt; of the vector storage hosted by this server
-c|--create &lt;CONFIG&gt;
    Implicitely create storage with &lt;CONFIG&gt; if it does not exist yet
-l|--logfile &lt;FILE&gt;
    Write logs to file &lt;FILE&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
</pre>
</li>

<a name="strusHelp"></a><li><b>strusHelp</b>
<br/>Program to print descriptions of functions available to console.<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>).
<input class="toggle-box" id="strusHelp_usage" type="checkbox" >
<label for="strusHelp_usage">Usage</label>
<pre>
usage: strusHelp [options] &lt;what&gt; &lt;name&gt;
&lt;what&gt; = specifies what type of item to retrieve (default all):
         tokenizer     : Get tokenizer function description
         normalizer    : Get normalizer function description
         aggregator    : Get aggregator function description
         join          : Get iterator join operator description
         weighting     : Get weighting function description
         summarizer    : Get summarizer function description
&lt;item&gt; = name of the item to retrieve (default all)
description: Get the description of a function.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-R|--resourcedir &lt;DIR&gt;
    Search resource files for analyzer first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

<a name="strusModuleInfo"></a><li><b>strusModuleInfo</b>
<br/>Program to print some information about a module in the module header (version, identifiers, etc.).<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusModule">strusModule</a>).
<input class="toggle-box" id="strusModuleInfo_usage" type="checkbox" >
<label for="strusModuleInfo_usage">Usage</label>
<pre>
strusModuleInfo  { &lt;modulepath&gt; }
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
&lt;modulepath&gt;  : path of module to load.
</pre>
</li>

<a name="strusPageWeight"></a><li><b>strusPageWeight</b>
<br/>Calculate the weight of a page derived from its linkage to other pages.
The linkage info is fed in a proprietary text format as input.
If strusVector has been built with WITH_PAGERANK="YES" then the value calculated will
be the <a href="https://en.wikipedia.org/wiki/PageRank">pagerank</a> value 
(invented by Larry Page and patented in the USA as https://www.google.com/patents/US6285999).
If strusVector has been built without page rank support or taken from a standard strus package then
the calculated value will be derived from the number of links pointing to a document (non transitive).<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusVector">strusVector</a>).
<input class="toggle-box" id="strusPageWeight_usage" type="checkbox" >
<label for="strusPageWeight_usage">Usage</label>
<pre>
usage: strusPageWeight [options] &lt;inputfile&gt;
description: Calculate the weight of a page derived from the linkage of documents with others,
             with help of the pagerank algorithm.
    &lt;inputfile&gt; :text file to process, lines with the following syntax:
        DECLARATION   = "*"  ITEMID "=" ["-&gt;"] { ITEMID } ";"
        ITEMID        : document identifier (unicode alpha characters without space)
    Each declaration describes the links of a document (left side)
    to other documents (right side). Redirects are marked with an arrow (-&gt;).
    options     :
    -h          : print this usage
    -V          : verbose output, print all declarations to stdout.
    -g          : logarithmic scale page rank calculation.
    -n &lt;NORM&gt;   : normalize result to an integer between 0 and &lt;NORM&gt;.
    -r &lt;PATH&gt;   : specify file &lt;PATH&gt; to write redirect definitions to.
    -t &lt;PATH&gt;   : specify file &lt;PATH&gt; to write the tokens to.
    -i &lt;ITER&gt;   : specify number of iterations to run as &lt;ITER&gt;.
    &lt;inputfile&gt; = input file path or '-' for stdin
                  file with lines of the for "*" SOURCEID = [-&gt;] {&lt;TARGETID&gt;} ";"
</pre>
</li>

<a name="strusUpdateStorageCalcStatistics"></a><li><b>strusUpdateStorageCalcStatistics</b>
<br/>Program to calculate a formula for each document in the storages and update a metadata field with the result.<br\>
(implemented in the project <a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>).
<input class="toggle-box" id="strusUpdateStorageCalcStatistics_usage" type="checkbox" >
<label for="strusUpdateStorageCalcStatistics_usage">Usage</label>
<pre>
usage: strusUpdateStorageCalcStatistics [options] &lt;metadata&gt; &lt;feattype&gt; &lt;formula&gt; &lt;sumnorm&gt;
&lt;metadata&gt;  = meta data element to store the result
&lt;feattype&gt;  = search index feature type to calculate the result with
&lt;formula&gt;   = meta formula to calculate one summand of the result for one document with
&lt;sumnorm&gt;   = formula to normalize the sum of summands for each document (identity is default)
description: Calculate a formula for each document in the storages
              and update a metadata field with the result.
options:
-h|--help
    Print this usage and do nothing else
-v|--version
    Print the program version and do nothing else
--license
    Print 3rd party licences requiring reference
-m|--module &lt;MOD&gt;
    Load components from module &lt;MOD&gt;
-M|--moduledir &lt;DIR&gt;
    Search modules to load first in &lt;DIR&gt;
-r|--rpc &lt;ADDR&gt;
    Execute the command on the RPC server specified by &lt;ADDR&gt;
-s|--storage &lt;CONFIG&gt;
    Define a storage configuration string as &lt;CONFIG&gt;
    &lt;CONFIG&gt; is a semicolon ';' separated list of assignments:
            path=&lt;LevelDB storage path&gt;
            create=&lt;yes/no, yes=do create if database does not exist yet&gt;
            cache=&lt;size of LRU cache for LevelDB&gt;
            compression=&lt;yes/no&gt;
            max_open_files=&lt;maximum number of open files for LevelDB&gt;
            write_buffer_size=&lt;Amount of data to build up in memory per file&gt;
            block_size=&lt;approximate size of user data packed per block&gt;
            cachedterms=&lt;file with list of terms to cache&gt;
-c|--commit &lt;N&gt;
    Set &lt;N&gt; as number of updates per transaction (default 10000)
    If &lt;N&gt; is set to 0 then only one commit is done at the end
-T|--trace &lt;CONFIG&gt;
    Print method call traces configured with &lt;CONFIG&gt;
    Example: -T "log=dump;file=stdout"
</pre>
</li>

</div>
</div>
</body>
</html>
