<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
	<link rel="icon" type="image/ico" href="images/strus.ico" />
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="description" content="Programming guidelines of strus, a collection of C++ libraries for building a full-text search engine." />
	<meta name="keywords" content="fulltext search engine C++" />
	<meta name="author" content="Patrick Frey &lt;patrickpfrey (a) yahoo (dt) com&gt;" />
	<link rel="stylesheet" type="text/css" href="text-profile.css" title="Text Profile" media="all" />
	<title>Strus programming guidelines</title>
</head>

<body>
<div id="wrap">
	<div id="content">
		<h1>Strus programming guidelines</h1>

		<h2>Programming language</h2>
		<h4>Strus is implemented in C++.</h4>

		<h2>Paradigms</h2>
		<h4>Exception free interfaces</h4>
		<p class="description">
		Interface classes must be exception free (they must not throw any exception), because 
		their calls might cross library or module boundaries and the very rigid linking rules 
		implied do not allow exceptions to be caught when
		crossing library or module borders on many systems (e.g. with gcc).<br/>
		Classes implementing such an interface class catch exceptions in their 
		methods before returning and report the caught exceptions through an error reporting 
		interface. The caller can later fetch the error from this error buffering interface.
		The error reporting interface is passed down to the objects behind the scenes when
		constructing the objects. This way it does not appear in the interfaces, only as interface class
		on its own.
		</p>
		<h4>Polymorphism</h4>
		<p class="description">Inheritance is only used for implementing pure interfaces.
		The names of the abstract classes all end with "Interface". Objects in <i>strus</i>
		are all either pure data types with no polymorphism or implementations of 
		pure interfaces referenced by pointers. This restriction makes all elements of the
		interface either serializable or proxyable.</p>

		<h4>Public/private/protected</h4>
		<p class="description">Avoid protected members and don't use public or friends 
		to open backdoors whenever possible.</p>

		<h4>Components built as libraries</h4>
		<p class="description">All components even extensions should be implemented as
		libraries. If they are built a modules the module whould wrap to the library.</p>

		<h4>Use of templates</h4>
		<p class="description">No templates in public interfaces.</p>

		<h2>Naming conventions</h2>

		<h4>Type naming</h4>
		<p class="description">In interfaces <i>strict camel case</i> is used.
		Type,struct and class names and enum members start with a capital letter.
		Exceptions of this rule are data types implementing an STL concept like for example an <i>iterator</i>.
		Method names start with a lower case letter.
		Enum names may or may not contain only capital letters.</p>

		<h4>Source file names</h4>
		<p class="description">Source and header file names start with a lower case letter
		and have - despite that - exactly the same name as the main class they implement.
		The wished rule is one class per source file, but this is not always the case, though 
		it is the case for interface header files.<br/>
		The main source file of a library has the same name trunk as the library. This name trunk has always 
		the prefix '<b>libstrus_</b>'. Main header files of libraries are in a 'lib' sub 
		directory of the main include and have the same name as the library
		without the prefix '<b>libstrus_</b>'. </p>

		<h4>Macro names</h4>
		<p class="description">Macros have only capital letters with underscores '<b>_</b>'
		separating semantical parts of the macro identifier. <br/>
		The use of macros should be avoided. Their use is obviously inevitable when they stear 
		alternative compiling or when they inject externally defined values like for example 
		version numbers.<br/>
		In other cases the use of macros has to be discussed and it is not a single contributors 
		decision when to use macros. If used they should conceptually add value to the
		software in terms of readability and uniformity.<br/>
		In the exported application interfaces the use of macros is forbidden.
		</p>

		<h4>Module global variable names</h4>
		<p class="description">Static global variable names in a modules (never exported)
		have the prefix '<b>g_</b>'.</p>

		<h4>Parameter names</h4>
		<p class="description">Class method parameter names of classes have the suffix '<b>_</b>',
		if their name clashes with a member name. Such name clashes should only happen
		if the parameter initializes a member name. Otherwise the naming would be misleading.</p>

		<h4>Local variable names</h4>
		<p class="description">Avoid variable names conaining only one letter like 'i', 'x'.
		They are hard to find without an editor supporting the programming language.
		(I personally do not like programming environments that go beyond a text editor with some
		highlighting. I am convinced that the quality of code raises in the absence of 
		semantically supported navigation help, because it educates you to work towards 
		a clear and consistent naming scheme.)<br/>
		</p>

		<h4>Visibility</h4>
		<p class="description">Use explicit visibility to declare exported symbols of
		shared libraries. Shared libraries export only functions constructing objects implementing 
		an interface, having only interface references or
		<a href="http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html">POD data types</a>
		or serializable C++ and STL data types as arguments.</p>
	
		<h4>Friend declarations</h4>
		<p class="description">Do not use friend declarations if possible.
		In most cases they are just backdoors that camouflage bad design.</p>

		<h4>Member variables</h4>
		<p class="description">Member variable names have the prefix '<b>m_</b>' if they are part
		of the interface. For pure <a href="http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html">POD structure types</a>,
		that are only used internally this prefix may be omitted.

		<h2>Build system</h2>
		<h4>Build tool</h4>
		<p class="description">The build system is currently <a href="http://www.cmake.org/">CMake</a>.
		But packaging with <a href="https://en.wikipedia.org/wiki/CPack">CPack</a>
		is forbidden. Packages are implemented manually.
		</p>

		<h4>Mixing compilers/linkers</h4>
		<p class="description">Compilers and linkers for building libraries and modules 
		of <i>strus</i> may not be mixable due to an interface design using 
		STL data types passing the interface. You have to check, if the STL data type implementations
		are compatible before mixing compilers. Due to the fact that the interfaces are exeption free,
		there are no further restrictions.
		</p>

		<h2>Code appearance</h2>
		<h4>Indentiation</h4>
		<p class="description">Indentiation with TABs only. Pascal style opening of block
		brackets '<b>{</b>' '<b>}</b>'. This means that you start a new line for the '<b>{</b>'
		opening a new block. The then clause of if statements with one assignment may be 
		written without opening an close brackets, e.g. "if (size > 0) sizeType = NON_ZERO;" </p>

		<h4>Source code documentation</h4>
		<p class="description">Avoid documenting the obvious. Documentation should be minimal
		in the source and only contain real information. Use numbering for execution steps and 
		alphabetic labeling for alternative choices. If you have the alternative to
		choose an implementation of a function with 300 lines of expanded code or an
		implementation of it as small function calling 10 subroutines, that have 7
		arguments and names that are not self explaining and each of them is called only
		once, then please choose the 300 line expanded implementation and document 
		the execution steps well.<br/> Use prefixes like
		<b>XY:NOTE</b> or <b>XY:HACK</b> where XY stands for your acronym for marking undesirable 
		situations (NOTE) or incomplete fixes or fixes with bad implications (HACK)
		that should be fixed, but can not be fixed instantly.</p>

		<h4>Doxygen documentation</h4>
		<p class="description">Interface documentation should be in
		<a href="www.doxygen.org">doxygen</a> style (backslash variant).</p>

		<h4>Errors/Warnings</h4>
		<p class="description">There must not appear any compiler warning or error in the build.
		Use the most restrictive compiler and linker settings available on your platform and declare warnings as 
		errors. There might exist exceptional cases (not till now !), but they have to be discussed.<br/>
		One exception are some language bindings, because their sources are generated by 3rdParty software.
		</p>
	</div>
</div>
</body>
</html>


