<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
	<link rel="icon" type="image/ico" href="images/strus.ico" />
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="description" content="Documentation of the built-in functions of strus, a collection of C++ libraries for building a full-text search engine." />
	<meta name="keywords" content="fulltext search engine C++" />
	<meta name="author" content="Patrick Frey &lt;patrickpfrey (a) yahoo (dt) com&gt;" />
	<link rel="stylesheet" type="text/css" href="text-profile.css" title="Text Profile" media="all" />
	<title>Strus built-in functions</title>
</head>

<body>
<script type="text/javascript">
</script><div id="wrap">
	<div id="content">
		<h1>Strus built-in functions</h1>
		<h2>Query evaluation</h2>
		<a name="PostingJoinOperators"></a>
		<h3>Postings join operators</h3>
		<p class="description">
		The following table lists the posting set join operators implemented in the core.
		A set of postings is modeled as
		<pre>{ (d,p) | d is a positive document number, p is a positive position index }</pre>
		</p>
		<div class="library">
		<table border="1">
		<tr>
		<th width=18%><p class="title">Name</p></th>
		<th width=75%><p class="title">Description</p></th>
		</tr><tr>
		<td><p class="identifier">union</p></td>
		<td><p class="description">Set union of the argument sets: (d,p) is a member of the
		result set, if it is a member of any ot the argument sets.</p></td>
		</tr><tr>
		<td><p class="identifier">intersect</p></td>
		<td><p class="description">Set intersection of the argument sets: (d,p) is a member
		of the result set, if it is a member of every argument set.</p></td>
		</tr><tr>
		<td><p class="identifier">diff</p></td>
		<td><p class="description">Set difference of the two arguments sets: (d,p) is a member 
		of the result set, if it is member of the first set but not of the second set.</p></td>
		</tr><tr>
		<td><p class="identifier">contains</p></td>
		<td><p class="description">Document intersection: (d,1) is a member of the result
		set, if for every arument set there exist a p with (d,p) is a member of the argument
		set. This operator is mainly used to describe efficient document selections not touching
		the position information blocks.</p></td>
		</tr><tr>
		<td><p class="identifier">succ</p></td>
		<td><p class="description">Successor set: (d,p+1) is member of the result set, for every
		element (d,p) of the argument set.</p></td>
		</tr><tr>
		<td><p class="identifier">pred</p></td>
		<td><p class="description">Predeccessor set: (d,p) is member of the result set, for every
		element (d,p+1) of the argument where with p &ne; 0.</p></td>
		</tr><tr>
		<td><p class="identifier">within</p></td>
		<td><p class="description">Select the first (positive range) or the last (negative range)
		element of a selection of elements of each argument set in the same document with 
		the positions in an interval of maximum size specified by the range argument.</p></td>
		</tr><tr>
		<td><p class="identifier">within_struct</p></td>
		<td><p class="description">Same as <b>within</b> but with an additional element (1st argument)
		that plays the role of a structure element, that must not be overlapped by the
		area covered by the selected elements.</p></td>
		</tr><tr>
		<td><p class="identifier">sequence</p></td>
		<td><p class="description">Select the first (positive range) or the last (negative range)
		element of a selection of elements of each argument set in the same document with 
		the positions in an interval of maximum size specified by the range argument, 
		ordered in the same order of positions as they appear in the input.</p></td>
		</tr><tr>
		<td><p class="identifier">sequence_struct</p></td>
		<td><p class="description">Same as <b>sequence</b> but with an additional element (1st argument)
		that plays the role of a structure element, that must not be overlapped by the
		area covered by the selected elements.</p></td>
		</tr>
		</table>
		</div>
		<a name="WeightingFunctions"></a>
		<h3>Weighting functions</h3>
		<p class="description">
		Here is the list of weighting functions defined in the core.
		</p>
		<div class="library">
		<table border="1">
		<tr>
		<th width=18%><p class="title">Name</p></th>
		<th width=75%><p class="title">Description</p></th>
		</tr><tr>
		<td><p class="identifier">bm25</p></td>
		<td><p class="description">BM25 (Okapi) weighting method. The parameters k1,b,a
		can be specified by the caller.
		</p></td>
		</tr><tr>
		<td><p class="identifier">bm25_dpfc</p></td>
		<td><p class="description">BM25 weighting method with an artificial ff calculated 
		from the real ff and some discrete increments given by some feature occurrence 
		relation checks based on proximity and structures (sentences). 
		The artificial increments can be specified as weighting function parameters
		titleinc,strinc,seqinc by the caller.
		</p></td>
		</tr><tr>
		<td><p class="identifier">metadata</p></td>
		<td><p class="description">Weighting method taking a metadata table element value
		as document weight.
		</p></td>
		</tr><tr>
		<td><p class="identifier">td</p></td>
		<td><p class="description">Weighting method taking a constant value as document weight.
		</p></td>
		</tr><tr>
		<td><p class="identifier">tf</p></td>
		<td><p class="description">Weighting method taking the feature frequency (ff) value as document weight.
		</p></td>
		</tr>
		</table>
		</div>
		<a name="SummarizerFunctions"></a>
		<h3>Summarizer functions</h3>
		<p class="description">
		Here is the list of summarizer functions defined in the core.
		</p>
		<div class="library">
		<table border="1">
		<tr>
		<th width=18%><p class="title">Name</p></th>
		<th width=75%><p class="title">Description</p></th>
		</tr><tr>
		<td><p class="identifier">metadata</p></td>
		<td><p class="description">Return the value of a meta data table element as summary.
		It has the following parameters:
			<ul>
			<li><b>name:</b>&nbsp;Name of the meta data element to return
			</li>
			</ul>
		</p></td>
		</tr><tr>
		<td><p class="identifier">attribute</p></td>
		<td><p class="description">Return the value of a document attribue as summary.
		It has the following parameters:
			<ul>
			<li><b>name:</b>&nbsp;Name of the attribute to return
			</li>
			</ul>
		</p></td>
		</tr><tr>
		<td><p class="identifier">matchpos</p></td>
		<td><p class="description">Return the feature matches as readable list of 
		position numbers as summary (mainly for debugging purposes).
		It has the following parameters:
			<ul>
			<li><b>match:</b>&nbsp;Feature with the matches to print the positions 
			</li>
			</ul>
		</p></td>
		</tr><tr>
		<td><p class="identifier">matchphrase</p></td>
		<td><p class="description">Return the forward index features of the sentences 
		covering the best matching windows in the result documents as summary.
		It has the following parameters:
			<ul>
			<li><b>type:</b>&nbsp;Name of the forward index element to build the summary with
			</li>
			<li><b>mark:</b>&nbsp;Highlighting tags for marking matches in the summary as pair of start and end tag separated with a '$'
			</li>
			<li><b>len:</b>&nbsp;Maximum length of one summary
			</li>
			<li><b>nof:</b>&nbsp;Maximum number of returned passages
			</li>
			<li><b>structseek:</b>&nbsp;Distance to seek for structure delimiters (punctuation)
			</li>
			<li><b>match:</b>&nbsp;Feature with the matches to use for weighting the passages for the summary 
			</li>
			<li><b>struct:</b>&nbsp;Feature describing structure delimiters (punctuation)
			</li>
			</ul>
		</p></td>
		</tr><tr>
		<td><p class="identifier">matchvariables</p></td>
		<td><p class="description">Return the features in the forward index that are
		referenced as position by variables in matching expressions.
		It has the following parameters:
			<ul>
			<li><b>type:</b>&nbsp;Name of the forward index element to build the summary with
			</li>
			<li><b>delimiter:</b>&nbsp;Delimiter to use for multiple elements matching (optional, default is ',')
			</li>
			<li><b>assign:</b>&nbsp;Assignment operator to use for results (optional, default is '=')
			</li>
			<li><b>match:</b>&nbsp;Feature with the matches to extract the variables assignments from
			</li>
			</ul>
		</p></td>
		</tr>
		</table>
		</div>

		<h2>Analyzer</h2>
		<a name="Segmenter"></a>
		<h3>Segmenter</h3>
		<p class="description">
		Currently there is only one built-in segmenter defined in the core. It is based on
		the <h href="http://textwolf.net">textwolf library</a> and is able to process XML.
		</p>
		<a name="Tokenizer"></a>
		<h3>Tokenizer</h3>
		<p class="description">
		The following tokenizer functions are defined as built-in in the core.
		</p>
		<div class="library">
		<table border="1">
		<tr>
		<th width=18%><p class="title">Name</p></th>
		<th width=75%><p class="title">Description</p></th>
		</tr><tr>
		<td><p class="identifier">punctuation</p></td>
		<td><p class="description">
		This tokenizer extracts end of sentences or other configured punctuation markers.
		It is available for the language English "en" and for German ("de").
		Unfortunately the quality for both languages supported is bad and has to be improved
		a lot.
		</p></td>
		</tr><tr>
		<td><p class="identifier">word</p></td>
		<td><p class="description">This tokenizer splits the content on word boundaries. The
		tokens are words. It is avaiable for european languages with a latin based alphabet.
		</p></td>
		</tr><tr>
		<td><p class="identifier">split</p></td>
		<td><p class="description">This tokenizer splits the content into chunks without
		whitespaces. It is mainly thought for the forward index creation.
		</p></td>
		</tr><tr>
		<td><p class="identifier">content</p></td>
		<td><p class="description">
		This tokenizer does not split the content at all. It just forward what it gets as
		input as one token.
		</p></td>
		</tr>
		</table>
		</div>

		<a name="Normalizer"></a>
		<h3>Normalizer</h3>
		<p class="description">
		The following normalizer functions are defined as built-in in the core.
		</p>
		<div class="library">
		<table border="1">
		<tr>
		<th width=18%><p class="title">Name</p></th>
		<th width=75%><p class="title">Description</p></th>
		</tr><tr>
		<td><p class="identifier">orig</p></td>
		<td><p class="description">
		This normalizer does nothing but just forwards the input as term.
		</p></td>
		</tr><tr>
		<td><p class="identifier">empty</p></td>
		<td><p class="description">
		This normalizer does nothing but just an empty string for every input junk received as input.
		</p></td>
		</tr><tr>
		<td><p class="identifier">stem</p></td>
		<td><p class="description">
		This normalizer does stemming of the input based on snowball stemmer in the language specified
		as argument.
		</p></td>
		</tr><tr>
		<td><p class="identifier">dictmap</p></td>
		<td><p class="description">
		This normalizer map each input token with a dictionary that is specified by file name in the
		argument. The normalizer returns the value defined as value in the map for the having the
		input element as key. If the element is not defined in the map then the result return 
		is the input token passed to it.
		</p></td>
		</tr><tr>
		<td><p class="identifier">lc</p></td>
		<td><p class="description">
		This normalizer returns the input with each character mapped to its lowercase.
		</p></td>
		</tr><tr>
		<td><p class="identifier">uc</p></td>
		<td><p class="description">
		This normalizer returns the input with each character mapped to its uppercase.
		</p></td>
		</tr><tr>
		<td><p class="identifier">convdia</p></td>
		<td><p class="description">
		This normalizer returns the input with each character that is a non latin character
		A..Z or a..z to its corresponding list of latin base characters. The transformation
		might depend on the language specified as first argument. For example in german ("de")
		<a href="https://en.wikipedia.org/wiki/Umlaut_%28linguistics%29">umlauts</a>
		are mapped to the latin base character followed by an 'e'.
		</p></td>
		</tr><tr>
		<td><p class="identifier">date2int</p></td>
		<td><p class="description">
		Returns a date time difference of a date time value to a constant base date time 
		value (e.g. '1970-01-01') as integer.<br/>
		The first parameter specifies the unit of the result and the constant base date time value.
		This unit is specified as string with the granularity 
		(one of { 'us'=microseconds, 'ms'=milliseconds, 's'=seconds, 'm'=minutes, 'h'=hours, 'd'=days })
		optionally followed by the base date time value. If the base date time
		value is not specified, then "1970-01-01" is assumed. Examples:
		<pre>
d 1970-01-01
d
d 1789-07-14
		</pre>
		The following parameters specify accepted formats of the date time input value.
		A possible format string is a string with '%' followed by an ascii character
		as substitute. Accepted substitutes are "%a" for short weekday name, "%b" for
		abbreviated month name, "%B" for full month name, "%d" for day of the month as 
		decimal 01 to 31, "%m" for month name as a decimal 01 to 12, "%w" for weekday as 
		decimal number 0 to 6 where Sunday is 0, "%W" week number 00 to 53 where 
		Monday is first day of week 1, "%y" for year without the century, 
		"%Y" for year with century, "%H" for hours in 24 hour calculation, 
		"%I" for hours in 12 hour calculation, "%M" for minutes,
		"%S" for seconds, "%s *" for fractional seconds, and many more.
		The normalizer checks for the first matching input date time format value
		and returns the difference from the base date time value and the granularity
		specified in the first argument of the method. The method requires at least
		two arguments. Example calls:
		</p><p class="description">
		<pre>
date2int( "ms 2000-01-01 00:00:00", "%Y/%m/%d %H:%M:%S *")
date2int( "d 1970-01-01", "%d.%m.%Y", "%Y/%m/%d")
date2int( "d", "%d.%m.%Y", "%Y/%m/%d", "%Y%m%d")
		</pre>
		</p></td>
		</tr>
		</table>
		</div>

		<a name="Aggregator"></a>
		<h3>Aggregator</h3>
		<p class="description">
		The following aggregator functions are defined as built-in in the core.
		</p>
		<div class="library">
		<table border="1">
		<tr>
		<th width=18%><p class="title">Name</p></th>
		<th width=75%><p class="title">Description</p></th>
		</tr><tr>
		<td><p class="identifier">count</p></td>
		<td><p class="description">
		This aggregator counts the elements of the feature type passed as argument in the document. 
		It is useful for some simple statistics.
		</p></td>
		</tr>
		</table>
		</div>
	</div>
</div>
</body>
</html>

